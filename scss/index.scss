@use 'sass:math';

$btnColor: #ff6347, #fa8072, #afeeee, #87cefa, #f0fff0;

@for $i from 0 to length($btnColor) {
  button:nth-of-type(#{$i + 1}) {
    background-color: nth($btnColor, $i + 1);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    line-height: 1.5;
    width: 80px;

    &:hover {
      background-color: darken(nth($btnColor, $i + 1), 10%);
    }

    &:disabled {
      background-color: lighten(nth($btnColor, $i + 1), 10%);
    }
  }
}

* {
  margin: 0;
  padding: 0;
}

$cnt: 12;
$r: 200;
$deg: math.div(360deg, $cnt);
$w: 20;
$left: math.div($r - $w, 2);

.clock {
  border: 1px solid gold;
  border-radius: 50%;
  height: 200px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) rotate(120deg) rotateY(180deg);
  width: 200px;

  @for $i from 0 to $cnt {
    span {
      height: #{$w}px;
      left: #{$left}px;
      line-height: 20px;
      position: absolute;
      text-align: center;
      top: #{$left}px;
      width: #{$w}px;
      border-radius: 50%;

      &:nth-of-type(#{$i + 1}) {
        &::before {
          width: 100%;
          height: 100%;
          transform: rotate(120deg) rotateY(180deg);
          text-align: center;
          content: '#{$i + 1}';
          position: absolute;
          left: #{math.div(($r - $w) * math.cos($i * $deg), 2)}px;
          top: #{math.div(($r - $w) * math.sin($i * $deg), -2)}px;
        }
      }
    }
  }
}

// grep
$parent: '.parent';

$computedStyle: inspect(getComputedStyle(#{$parent}));
$columnGap: map-get($computedStyle, 'column-gap');


@debug $columnGap;
